// 2. Вставить тире между словами строки
// Напишите функцию insert_dash(str), которая принимает строку str в качестве аргумента и вставляет тире (-) между словами. При этом все символы строки необходимо перевести в верхний регистр.
// let replaceStr = (str) => {
///   return str.replaceAll(" ", "-");
// };
// let str = 'HTML JavaScript PHP';
// // console.log(replaceStr(str));

// // 3. Сделать первую букву строки прописной
// // Напишите функцию, которая принимает строку в качестве аргумента и преобразует регистр первого символа строки из нижнего регистра в верхний.

// let str = 'string not starting with capital';

// function cursive_letter(str) {
//   return str[0].toUpperCase() + str.slice(1); // возвращаем строку, которая состоит из первой буквы переданной строки str в верхнем регистре + оставшейся части строки, т.к. slice(1) при отсутсвии второго аргумента возвращает часть строки от указанной позиции до конца.
// }

// 4. Первая буква каждого слова заглавная
// Напишите функцию capitalize(str), которая возвращает строку, в которой каждое слово начинается с заглавной буквы.

// let str = 'каждый охотник желает знать';

// function capitalize(str) {
//   str = str[0].toUpperCase() + str.slice(1); // делаем первую букву сразу заглавной, т.к. она точно будет заглавной
//   let pos = 0;
//   while (str.includes(' ', pos + 1)) {
//     // задаем условие цикла. Прибавляем единицу для того, чтобы избежать бесконечного цикла, т.к. если всегда проверять по найденной позиции то мы навсегда остановимся на первом пробеле, ведь в отличие от 2 задачи прбел у нас не удаляется
//     pos = str.indexOf(' ', pos + 1); // ищем индекс, под которым расположен пробел
//     str =
//       str.slice(0, pos + 1) + str[pos + 1].toUpperCase() + str.slice(pos + 2); // первый slice делит строку до первой буквы следующего слова, прибавляется к ней первую букву слова в верхнем регистре и оставшуюся строку, после этой буквы.
//   }
//   return str;
// }

// 5.Напишите функцию change_register(str), которая принимает в качестве
// аргумента строку и и заменяет регистр каждого символа на противоположный.
// Например, если вводится «КаЖдЫй ОхОтНиК», то на выходе должно быть «кАжДыЙ
// оХоТнИк».
// let str = 'КаЖдЫй ОхОтНиК жЕлАеТ зНаТь';
// function change_register(str) {
//   let result = '';
//   for (let i = 0; i < str.length; i++) { // проходимся циклом по всему слову
//     if (str[i].toUpperCase() === str[i]) { // проверяем равен ли символ этому же символу в верхнем регистре
//       result += str[i].toLowerCase(); // если равен, то требуется его сделать в нижнем регистре
//     } else {
//       result += str[i].toUpperCase(); // иначе в верхнем
//     }
//   }
//   return result;
// }
// console.log(change_register(str));

// 6. Удалить все не буквенно-цифровые символы
// Напишите функцию remove_char(str), которая возвращает строку, очищенную от всех не буквенно-цифровых символов.
// let str = 'every., -/ hunt1er #! wishes ;: {} to $ % ^ & * know 11111';
// function remove_char(str) {
//   let result = '';
//   for (let i = 0; i < str.length; i++) { // проверяем каждый символ
//     if (str[i].toUpperCase() !== str[i].toLowerCase()) { // проверяем буква ли текущий символ. Только буквы при сравнении не будут равны в верхнем и нижнем регистре, т.к. у символов и цифр нет других регистров и их код не меняется
//       result += str[i]; //если условие истинно, то прибавляем к результирующей строке
//     } else if (isFinite(+str[i])) { // если символ не буква, тогда проверяем цифра ли этот символ. Для этого явно приводим символ к числу и проверяем его с помощью функции isFinite, т.к. если привести к числу любой знак или букву, то получим NaN. isFinite возвращает true, только если число не равно NaN, +infinite, -infinite.
//       result += str[i];
//     }
//   }
//   return result;

// 7. Нулевое заполнение строки
// Напишите функцию zeros(num, len), которая дополняет нулями до указаной длины числовое значение с
// дополнительным знаком «+» или « -« в зависимости от передаваемого аргумента.

// function zeros(num, len, sign) {
//   numZeros = num + ''; // делаем из числа num строку, чтобы можно было определеять длину
//   while (numZeros.length < len) {
//     // создаем цикл, который будет выполняться до тех пор, пока изначальное число будет иметь меньшую длину, чем требуется
//     numZeros += '0'; //прибавляем нули
//   }
//   return sign === undefined || sign === '' ? numZeros : sign + numZeros; // в зависимости от того передан знак или нет, возвращаем число без знака или со знаком
// }

// console.log(zeros(15, 6));

// 8. Сравнение строк без учёта регистра
// Напишите функцию comparison(str1, str2), которая сравнивает строки без учёта регистра символов.

// function comparison(str1, str2) {
//  тут нужно просто привести строку к одному регистру и сравнить их, уверен, что с этим у вас проблем не возникло)
// };

// 9. Поиск без учета регистра
// Напишите функцию insensitive_search(str1, str2), которая осуществляет поиск подстроки str2 в строкеstr1 без учёта регистра символов.

// function insensitive_search(str1, str2) {
//   return str1.toLowerCase().includes(str2.toLowerCase()) // приводим к одному регистру обе строки и
//     ? 'Подстрока найдена'function insensitive_search(str1, str2) {
//   return str1.toLowerCase().includes(str2.toLowerCase()) // приводим к одному регистру обе строки и
//     ? 'Подстрока найдена' // в случае если includes вернет true, возвращаем эту строку
//     : 'Подстрока не найдена'; //  иначе эту
// } // в случае если includes вернет true, возвращаем эту строку
//     : 'Подстрока не найдена'; //  иначе эту
// }

// 10. ВерблюжийРегистр (CamelCase)
// Напишите функцию initCap(str), которая преобразует стиль написания составных слов строки в CamelCase, при котором несколько слов пишутся слитно без пробелов, при этом каждое слово внутри строки пишется с заглавной буквы.

let initCap = (str) => {
  str = str.toLowerCase(); //приводим строку к нижнему регистру
  let pos = 0; // в эту переменную будем записывать позицию, на которой найден пробел
  while (str.includes(' ', pos)) {
    // задаем условие выполнение цикла - он будет выполняться до тех пор, пока в строке есть пробелы
    pos = str.indexOf(' ', pos); // ищем индекс, под которым расположен пробел
    str = str.slice(0, pos) + str[pos + 1].toUpperCase() + str.slice(pos + 2); // первый slice делит строку до найденого пробела, расположенного в строке под индесом pos, складываем её с первой буквой после пробела(pos + 1) в верхнем регистре,  и остальной частью строки.
  }
  return str;
};

// 11. Змеиный_регистр (snake_case)
// Напишите функцию initSnake(str), которая преобразует стиль написания составных слов строки из CamelCase в snake_case, при котором несколько слов разделяются символом подчеркивания (_), причём каждое слово пишется с маленькой буквы.

//  решение аналогично второй задаче, только сперва привести строку к нижнему регистру
// 12. Повторить строку n раз
// Напишите функцию repeatStr(str, n), которая вовращает строку повторяемую определённое количество раз.

// function repeatStr(str, n) {
//   let result = '';
//   for (let i = 0; i < n; i += 1) {
//     result += str;
//   }
//   return result;
// }

// 13. Получить имя файла
// Напишите функцию path(pathname), которая вовращает имя файла (подстрока после последнего символа "\" ) из полного пути к файлу.

// let pathname = '/home/user/dir/file.txt';

// function path(pathname) {
//   let posLastSlash = pathname.lastIndexOf('/'); // находим индекс, по котороым расположен последний символ "/"
//   return pathname.slice(posLastSlash + 1); // возвращаем подстроку, которая расположена после последнего "/"
// }

// 14. Заканчивается ли строка символами другой строки
// Создайте метод объекта String endsWith(), который сравнивает подстроку str1 с окончанием исходной строки str и определяет заканчивается ли строка символами подстроки.
// эту задачу мы разберем в дальнейшем, когда дойдем до темы прототипов

// 15. Подстрока до/после указанного символа
// Напишите функцию getSubstr(str, char, pos), которая возвращает часть строки, расположенную после или до указанного символа char в зависимости от параметра pos.

// let str = 'Астрономия — Наука о небесных телах';

// function getSubstr(str, char, pos) {
//   if (pos === 'after') return str.slice(str.indexOf(char) + 1);
//   // при переданном флаге pos after будем возвращать строку после указанного символа, значит в slice нужно указать только начальную позицию и он вернет всю оставшуюся часть строки
//   else if (pos === 'before') return str.slice(0, str.indexOf(char));
//   // иначе нужно указать в slice от нулевой позиции до позиции символа
//   else return str; // если флаг pos не передан, то просто вернем всю строку
// }

// 16. Вставить подстроку в указанную позицию строки
// Напишите функцию insert(str, substr, pos), которая вставляет подстроку substr в указханную позицию pos строки str. По умолчанию подстрока вставляется в начало строки.

// function insert(str, substr, pos) {
//   if (!pos) return substr + str; // если позиция не передана, то просто вставляем подстроку substr в начале строки
//   return str.slice(0, pos) + substr + str.slice(pos); // тут просто обрезаем строку до указанной позиции и после указанной, а между ними вставляем переданную подстроку
// }

// 17. Ограничить длину строки
// Напишите функцию limitStr(str, n, symb), которая обрезает строку, если она длиннее указанного количества символов n. Усеченная строка должна заканчиваться троеточием «...» (если не задан параметр symb) или заданным символом symb.

// function limitStr(str, n, symb = '...') {
//   // задаем по умолчанию значение symb '...'

//   return str.length < n ? str : str.slice(0, n) + symb; // проверяем длину строки str, и в случае, если она больше переданного значения n обрезаем с помощью slice от начала строки до индекса n и добавляем symb
// }

// console.log(limitStr('123456789', 3));

// 18. Поделить строку на фрагменты

// function cutString(str, n) {
//   // вторым аргументом передаем размер каждого фрмагмента строки
//   let result = []; // инициализируем пустой массив, куда будем складывать части строки
//   for (let i = 0; i < str.length; i += n) {
//     result.push(str.substr(i, n)); // на каждой итерации мы будем добавлять в массив часть строки от позиции i длинной n, на последней итерации, даже если окажется, что длинна требуемой части большей индекса последнего символа строки, на просто верентся оставшаяся часть
//   }
//   return result;
// }

// 19. Количество вхождений символа в строке
// Напишите функцию count(str, symb), которая возвращает количество символов symb в строке str.

// let symb = 'о';
// let str = 'Астрономия это наука о небесных объектах';
// function count(str, symb) {
//   let result = 0;
//   for (let i = 0; i < str.length; i++) {
//     // проходимся циклом по всей строке и если рассматриваемый символ равен символу symb прибавляем единицу к финальному результату
//     if (str[i] === symb) {
//       result += 1;
//     }
//   }
//   return result;
// }

// 20. Удалить лишние пробелы из строки
// Напишите функцию strip(str), которая удаляет все лишние пробелы из строки str.

// let str = "    Max   is    a good       boy     ";
//
// function strip(str) {
//   let result = str.trim();
//   while (result.includes('  ')) {
//       result = result.replaceAll("  ", " ");
//   }
//   return result
// }
// console.log(strip(str));

// function strip(str) {
//   str = str.trim(); // сначала удалим все лишние пробелы вначале и в конце строки
//   let pos = 0; // в эту переменную будем записывать позицию, на которой найден пробелы
//   while (str.includes('  ', pos)) {
//     // задаем условие выполнение цикла - он будет выполняться до тех пор, пока в строке есть фрагменты с несколькими проблема(в условии 2 пробела, а значит оно выполнится в случае, если будет 2 и более пробелов)
//     pos = str.indexOf('  ', pos); // ищем индекс, под которым расположены 2 пробела
//     str = str.slice(0, pos + 1) + str.slice(pos + 1).trim(); // первый slice делит строку до найденного пробела(вклчая сам пробел), расположенного в строке под индесом pos, к этой части прибавляем оставшуюся часть строки, удаляя из нее лишние пробелы, расположенные после первого
//   }
//   return str;
// }
// 21. Удалить лишние слова из строки

// Напишите функцию cutString(str, n), которая удаляет лишние слова из строки str, оставив в ней n слов.

// let str = 'Сила тяжести приложена к центру масс тела';

// function cutString(str, n) {
//   let count = 0; // в эту переменную будем записывать количество уже добавленных в результат слов
//   let pos = 0; // в эту переменную будем записывать позицию, на которой найден пробел
//   let result = '';
//   while (count < n && str.includes(' ', pos + 1)) {
//     // цикл будет выполняться до тех пор, пока количество слов будет меньше требуемуму количеству слов n и пока не закончатся слова в строке(т.е. если хоть одно из условий станет false, то цикл прекратится). Т.к. слова разделены пробелмаи, то мы снова будем ориентироваться по проблеам. В условии добавляем единицу, чтобы исключить из рассмотрения расмотренный на прошлой итерации пробел
//     count += 1;
//     pos = str.indexOf(' ', pos + 1); // ищем индекс, под которым расположен каждый следующий пробел
//   }
//   if (!str.includes(' ', pos + 1)) {
//     // если цикл закончился из-за того, что слов в строке оказалось меньше, чем указано в аргументе функции, то просто возвращаем строку
//     return str;
//   } else {
//     // иначе просто обрезаем строку до последнего рассмотренного пробела
//     return str.slice(0, pos);
//   }
// }
